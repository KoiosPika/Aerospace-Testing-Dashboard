name: Deploy Backend to EC2

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: aerospace-backend
  EC2_INSTANCE_IP: 3.22.79.0
  SSH_USER: "ubuntu"
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  DOCKER_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/aerospace-backend"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::600627329849:role/GitHubActions-Deploy-Backend
          aws-region: us-east-2
          audience: sts.amazonaws.com
          role-session-name: GitHubActionsSession

      - name: Debug Firebase Credentials 
        run: echo '${{ secrets.FIREBASE_CREDENTIALS }}' | tr -d '\r'

      - name: Create .env file
        run: |
          if [ -f ".env" ]; then
            rm .env
          fi
          
          touch .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "FIREBASE_CREDENTIALS=/app/firebase_credentials.json" >> .env

          ls -la
          cat .env

      - name: Create Firebase Credentials File
        run: |
          if [ -f "firebase_credentials.json" ]; then
            echo "Firebase credentials file already exists. Skipping creation."
          else
            echo "Creating Firebase credentials file..."
            echo '${{ secrets.FIREBASE_CREDENTIALS }}' | jq '.' > firebase_credentials.json
            cat firebase_credentials.json
          fi

      - name: Copy Environment Files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_INSTANCE_IP }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: ".env,firebase_credentials.json"
          target: "/home/ubuntu/"

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:latest

      - name: Debug AWS Account ID
        run: echo "AWS Account ID ${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_INSTANCE_IP }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            export AWS_REGION=us-east-2
            export DOCKER_IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/aerospace-backend"

            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $DOCKER_IMAGE
            
            # Pull latest image
            docker pull $DOCKER_IMAGE:latest

            # Force stop and remove any existing aerospace-backend container 
            docker stop aerospace-backend || true
            docker rm aerospace-backend || true

            # Remove orphaned containers
            docker container prune -f

            if [ ! -f "/home/ubuntu/.env" ]; then
              echo "ERROR: .env file is missing on EC2!"
              exit 1
            fi

            if [ ! -f "/home/ubuntu/firebase_credentials.json" ]; then
              echo "ERROR: firebase_credentials.json file is missing on EC2!"
              exit 1
            fi

            # Run the container with environment files
            docker run -d --name aerospace-backend \
              --env-file /home/ubuntu/.env \
              -v /home/ubuntu/firebase_credentials.json:/app/firebase_credentials.json \
              -p 8000:8000 $DOCKER_IMAGE:latest
